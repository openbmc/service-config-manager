{
  "comments": [
    {
      "key": {
        "uuid": "a1ab1c26_cc314be1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000235
      },
      "writtenOn": "2021-11-11T18:25:57Z",
      "side": 1,
      "message": "Please explain how a system integrator (the person who configures the firmware build environment) can:\n1. Configure this feature out of their image. Is this the meson USBCodeUpdate option?\n2. When USBCodeUpdate is enabled, how can the system integrator set the default value for the phosphor_usb_code_update property.  Should there be a meson build option for the default value?",
      "revId": "1124861bc2c63321eb0619dea56ada41afb1ad59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "621c923a_f8ece80a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000400
      },
      "writtenOn": "2021-11-12T10:28:05Z",
      "side": 1,
      "message": "\u003e When USBCodeUpdate is enabled, how can the system integrator set \u003e the default value for the phosphor_usb_code_update property. \n\u003e Should there be a meson build option for the default value?\n\nThis hasn\u0027t come true yet. I\u0027m working on it",
      "parentUuid": "a1ab1c26_cc314be1",
      "revId": "1124861bc2c63321eb0619dea56ada41afb1ad59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d577e2f_1ad71740",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000400
      },
      "writtenOn": "2021-11-15T02:16:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "621c923a_f8ece80a",
      "revId": "1124861bc2c63321eb0619dea56ada41afb1ad59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e7bdd26_0600c1c1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1000235
      },
      "writtenOn": "2021-11-11T18:25:57Z",
      "side": 1,
      "message": "Please add test cases to show the code update property survives BMC reboot.  For example, set the property to true, then reboot the BMC, then validate the property is true.  Repeat for the \"false\" value.",
      "revId": "1124861bc2c63321eb0619dea56ada41afb1ad59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ed2f9ab_24dce9a8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1000400
      },
      "writtenOn": "2021-11-12T10:28:05Z",
      "side": 1,
      "message": "There is no persistence here. Restarting BMC will restore the default value. All other services, such as bmcweb/phosphor-ipmi-net and so on, will also restore their default values too.",
      "parentUuid": "0e7bdd26_0600c1c1",
      "revId": "1124861bc2c63321eb0619dea56ada41afb1ad59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "514f2991_28e328e0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1000235
      },
      "writtenOn": "2021-11-15T15:38:51Z",
      "side": 1,
      "message": "A requirement should be: This setting shall persist across BMC reboots.\nWhy?  It would be surprising to the BMC admin if rebooting the BMC re-enables the USB code update service.\nThe setting must survive BMC reboot to meet our needs.\n\nI believe the other services enablement setting (network IPMI, SSH, bmcweb, obmc-console service, etc.) persists across BMC reboots.  They are all systemd services, and the persistence of the setting is provided by systemd.  Can the testers confirm this?\n\nThis patch is fundamentally different because the setting is held in-memory in the service-config-manager app.\n\nHere are two independent ideas for how to persist the setting:\n1. Create a trivial do-nothing service which this can enable or disable.  In this way, systemd manages the setting.\n2. Write the setting to a file (for example, /etc/usb-code-update-enablement) whenever it is changed, and read it from that file when the service-config-manager app starts up.",
      "parentUuid": "3ed2f9ab_24dce9a8",
      "revId": "1124861bc2c63321eb0619dea56ada41afb1ad59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8b3cfa9_d83544c1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1000235
      },
      "writtenOn": "2021-11-15T16:41:07Z",
      "side": 1,
      "message": "I asked this question on the email list.  You can see the archived email, for example, here:\nhttps://lore.kernel.org/openbmc/d204389c-abf0-3547-ebfc-94af0b659bab@linux.ibm.com/T/#u",
      "parentUuid": "514f2991_28e328e0",
      "revId": "1124861bc2c63321eb0619dea56ada41afb1ad59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37867427_4bc02aa0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1000400
      },
      "writtenOn": "2021-11-16T02:15:57Z",
      "side": 1,
      "message": "\u003e I believe the other services enablement setting (network IPMI, SSH, bmcweb, \n\u003e obmc-console service, etc.) persists across BMC reboots.  They are all systemd\n\u003e services, and the persistence of the setting is provided by systemd.  Can the \n\u003e testers confirm this?\n\nYes, you\u0027re right. I\u0027ve tested it.\n\n\u003e Here are two independent ideas for how to persist the setting:\n\u003e 1. Create a trivial do-nothing service which this can enable or disable.  In \n\u003e this way, systemd manages the setting.\n\u003e 2. Write the setting to a file (for example, /etc/usb-code-update-enablement) \n\u003e whenever it is changed, and read it from that file when the service-config-manager app starts up.\n\nI think #2 it\u0027s better. I\u0027ll do it. Thanks.",
      "parentUuid": "d8b3cfa9_d83544c1",
      "revId": "1124861bc2c63321eb0619dea56ada41afb1ad59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35517adb_50f3c61a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1000400
      },
      "writtenOn": "2021-11-16T08:35:07Z",
      "side": 1,
      "message": "\u003e 2. Write the setting to a file (for example, /etc/usb-code-update-enablement) \n\u003e whenever it is changed, and read it from that file when the service-config- manager app starts up.\n\nDone. Now this setting is persistent across BMC reboots.",
      "parentUuid": "37867427_4bc02aa0",
      "revId": "1124861bc2c63321eb0619dea56ada41afb1ad59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "856f99c4_6aa1c366",
        "filename": "src/main.cpp",
        "patchSetId": 2
      },
      "lineNbr": 191,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2021-11-15T05:56:25Z",
      "side": 1,
      "message": "Trying to understand why it is not added as part of ServiceName in line @37. If you can use #if flag and accordingly update the service name then it should be fine. \n\nReason: If we start adding multiple services like this, then code will not be maintainable. Let me know if there is any specific reason, which will not make it to work",
      "range": {
        "startLine": 191,
        "startChar": 8,
        "endLine": 191,
        "endChar": 41
      },
      "revId": "1124861bc2c63321eb0619dea56ada41afb1ad59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed708eaf_a39257ae",
        "filename": "src/main.cpp",
        "patchSetId": 2
      },
      "lineNbr": 191,
      "author": {
        "id": 1000400
      },
      "writtenOn": "2021-11-16T08:35:07Z",
      "side": 1,
      "message": "\u003e why it is not added as part of ServiceName in line @37\n\nphosphor_usb_code_update is not a daemon, but an application. We can\u0027t find it by calling the \"ListUnits\" method(line @237). Therefore, if it is added to the array at line 37, the object will not be created.",
      "parentUuid": "856f99c4_6aa1c366",
      "range": {
        "startLine": 191,
        "startChar": 8,
        "endLine": 191,
        "endChar": 41
      },
      "revId": "1124861bc2c63321eb0619dea56ada41afb1ad59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5c15d44_8529beee",
        "filename": "src/srvcfg_manager.cpp",
        "patchSetId": 2
      },
      "lineNbr": 469,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2021-11-15T05:56:25Z",
      "side": 1,
      "message": "trying to understand the special handling needed for this scenario.",
      "range": {
        "startLine": 467,
        "startChar": 16,
        "endLine": 469,
        "endChar": 17
      },
      "revId": "1124861bc2c63321eb0619dea56ada41afb1ad59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a093586e_a3a2b0c8",
        "filename": "src/srvcfg_manager.cpp",
        "patchSetId": 2
      },
      "lineNbr": 469,
      "author": {
        "id": 1000400
      },
      "writtenOn": "2021-11-16T08:35:07Z",
      "side": 1,
      "message": "srvcfg_manager don\u0027t need to do anything to systemd when we enable/disable phosphor_usb_code_update, which is different from other services. srvcfg_manager only need to show the properties on the object. And another process will look for these properties: https://gerrit.openbmc-project.xyz/c/openbmc/service-config-manager/+/48780/5//COMMIT_MSG#25",
      "parentUuid": "e5c15d44_8529beee",
      "range": {
        "startLine": 467,
        "startChar": 16,
        "endLine": 469,
        "endChar": 17
      },
      "revId": "1124861bc2c63321eb0619dea56ada41afb1ad59",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}